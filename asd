IncomingMessage {
  _readableState:
   ReadableState {
     objectMode: false,
     highWaterMark: 16384,
     buffer: BufferList { head: null, tail: null, length: 0 },
     length: 0,
     pipes: null,
     pipesCount: 0,
     flowing: true,
     ended: true,
     endEmitted: true,
     reading: false,
     sync: false,
     needReadable: false,
     emittedReadable: false,
     readableListening: false,
     resumeScheduled: false,
     destroyed: false,
     defaultEncoding: 'utf8',
     awaitDrain: 0,
     readingMore: false,
     decoder: null,
     encoding: null },
  readable: false,
  domain: null,
  _events: {},
  _eventsCount: 0,
  _maxListeners: undefined,
  socket:
   Socket {
     connecting: false,
     _hadError: false,
     _handle:
      TCP {
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        onconnection: null,
        writeQueueSize: 0,
        _consumed: true },
     _parent: null,
     _host: null,
     _readableState:
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: [Object],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     domain: null,
     _events:
      { end: [Array],
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        drain: [Array],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        close: [Array],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause] },
     _eventsCount: 10,
     _maxListeners: undefined,
     _writableState:
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: false,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     allowHalfOpen: true,
     _bytesDispatched: 1566,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server:
      Server {
        domain: null,
        _events: [Object],
        _eventsCount: 2,
        _maxListeners: undefined,
        _connections: 2,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        _pendingResponseData: 0,
        maxHeadersCount: null,
        _connectionKey: '6::::8446',
        [Symbol(asyncId)]: 10 },
     _server:
      Server {
        domain: null,
        _events: [Object],
        _eventsCount: 2,
        _maxListeners: undefined,
        _connections: 2,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        _pendingResponseData: 0,
        maxHeadersCount: null,
        _connectionKey: '6::::8446',
        [Symbol(asyncId)]: 10 },
     _idleTimeout: 120000,
     _idleNext:
      Socket {
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: null,
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _events: [Object],
        _eventsCount: 10,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: true,
        _bytesDispatched: 0,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: [Object],
        _idleTimeout: 120000,
        _idleNext: [Object],
        _idlePrev: [Circular],
        _idleStart: 2941,
        _destroyed: false,
        parser: [Object],
        on: [Function: socketOnWrap],
        _paused: false,
        read: [Function],
        _consuming: true,
        [Symbol(asyncId)]: 19,
        [Symbol(bytesRead)]: 0,
        [Symbol(asyncId)]: 20,
        [Symbol(triggerAsyncId)]: 19 },
     _idlePrev:
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Object],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idleStart: 4210,
     _destroyed: false,
     parser:
      HTTPParser {
        '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        '4': [Function: bound onParserExecute],
        _headers: [],
        _url: '',
        _consumed: true,
        socket: [Circular],
        incoming: [Circular],
        outgoing: null,
        maxHeaderPairs: 2000,
        onIncoming: [Function: bound parserOnIncoming] },
     on: [Function: socketOnWrap],
     _paused: false,
     read: [Function],
     _consuming: true,
     _httpMessage:
      ServerResponse {
        domain: null,
        _events: [Object],
        _eventsCount: 1,
        _maxListeners: undefined,
        output: [],
        outputEncodings: [],
        outputCallbacks: [],
        outputSize: 0,
        writable: true,
        _last: false,
        upgrading: false,
        chunkedEncoding: false,
        shouldKeepAlive: true,
        useChunkedEncodingByDefault: true,
        sendDate: true,
        _removedConnection: false,
        _removedContLen: false,
        _removedTE: false,
        _contentLength: null,
        _hasBody: true,
        _trailer: '',
        finished: false,
        _headerSent: false,
        socket: [Circular],
        connection: [Circular],
        _header: null,
        _onPendingData: [Function: bound updateOutgoingData],
        _sent100: false,
        _expect_continue: false,
        req: [Circular],
        locals: {},
        writeHead: [Function: writeHead],
        end: [Function: end],
        [Symbol(outHeadersKey)]: [Object] },
     [Symbol(asyncId)]: 13,
     [Symbol(bytesRead)]: 0,
     [Symbol(asyncId)]: 15,
     [Symbol(triggerAsyncId)]: 13 },
  connection:
   Socket {
     connecting: false,
     _hadError: false,
     _handle:
      TCP {
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        onconnection: null,
        writeQueueSize: 0,
        _consumed: true },
     _parent: null,
     _host: null,
     _readableState:
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: [Object],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     domain: null,
     _events:
      { end: [Array],
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        drain: [Array],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        close: [Array],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause] },
     _eventsCount: 10,
     _maxListeners: undefined,
     _writableState:
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: false,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     allowHalfOpen: true,
     _bytesDispatched: 1566,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server:
      Server {
        domain: null,
        _events: [Object],
        _eventsCount: 2,
        _maxListeners: undefined,
        _connections: 2,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        _pendingResponseData: 0,
        maxHeadersCount: null,
        _connectionKey: '6::::8446',
        [Symbol(asyncId)]: 10 },
     _server:
      Server {
        domain: null,
        _events: [Object],
        _eventsCount: 2,
        _maxListeners: undefined,
        _connections: 2,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        _pendingResponseData: 0,
        maxHeadersCount: null,
        _connectionKey: '6::::8446',
        [Symbol(asyncId)]: 10 },
     _idleTimeout: 120000,
     _idleNext:
      Socket {
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: null,
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _events: [Object],
        _eventsCount: 10,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: true,
        _bytesDispatched: 0,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: [Object],
        _idleTimeout: 120000,
        _idleNext: [Object],
        _idlePrev: [Circular],
        _idleStart: 2941,
        _destroyed: false,
        parser: [Object],
        on: [Function: socketOnWrap],
        _paused: false,
        read: [Function],
        _consuming: true,
        [Symbol(asyncId)]: 19,
        [Symbol(bytesRead)]: 0,
        [Symbol(asyncId)]: 20,
        [Symbol(triggerAsyncId)]: 19 },
     _idlePrev:
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Object],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idleStart: 4210,
     _destroyed: false,
     parser:
      HTTPParser {
        '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        '4': [Function: bound onParserExecute],
        _headers: [],
        _url: '',
        _consumed: true,
        socket: [Circular],
        incoming: [Circular],
        outgoing: null,
        maxHeaderPairs: 2000,
        onIncoming: [Function: bound parserOnIncoming] },
     on: [Function: socketOnWrap],
     _paused: false,
     read: [Function],
     _consuming: true,
     _httpMessage:
      ServerResponse {
        domain: null,
        _events: [Object],
        _eventsCount: 1,
        _maxListeners: undefined,
        output: [],
        outputEncodings: [],
        outputCallbacks: [],
        outputSize: 0,
        writable: true,
        _last: false,
        upgrading: false,
        chunkedEncoding: false,
        shouldKeepAlive: true,
        useChunkedEncodingByDefault: true,
        sendDate: true,
        _removedConnection: false,
        _removedContLen: false,
        _removedTE: false,
        _contentLength: null,
        _hasBody: true,
        _trailer: '',
        finished: false,
        _headerSent: false,
        socket: [Circular],
        connection: [Circular],
        _header: null,
        _onPendingData: [Function: bound updateOutgoingData],
        _sent100: false,
        _expect_continue: false,
        req: [Circular],
        locals: {},
        writeHead: [Function: writeHead],
        end: [Function: end],
        [Symbol(outHeadersKey)]: [Object] },
     [Symbol(asyncId)]: 13,
     [Symbol(bytesRead)]: 0,
     [Symbol(asyncId)]: 15,
     [Symbol(triggerAsyncId)]: 13 },
  httpVersionMajor: 1,
  httpVersionMinor: 1,
  httpVersion: '1.1',
  complete: true,
  headers:
   { host: 'localhost:8446',
     connection: 'keep-alive',
     'content-length': '9385',
     'cache-control': 'max-age=0',
     origin: 'http://localhost:8380',
     'upgrade-insecure-requests': '1',
     'content-type': 'application/x-www-form-urlencoded',
     'user-agent': 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/77.0.3865.75 Safari/537.36',
     'sec-fetch-mode': 'navigate',
     accept: 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3',
     'sec-fetch-site': 'same-site',
     referer: 'http://localhost:8380/simplesaml/saml2/idp/SSOService.php?SAMLRequest=fVHBbsIwDP2VKHeapGWoRFDExmFITKC122GXKZSMRqRJFqdon79QQGLSxMWS7ef3%2FOzJ7KfV6Cg9KGummCUUz4oJiFY7Pu9CY17ldychoAgzwPvGFHfecCtAATeilcBDzcv5y4qnCeXO22BrqzFaLqb4cyRono2GIv2S23G%2BY9kDyzB6vwrGiQgE6OTSQBAmxBJl4wEdD1Ja0RFnQ87SJGX5B0abC%2FWjMjtl9vf32J5BwJ%2BrajPYrMsKo0V0oowIvXQTguOEaFsL3VgIPM9ySkC1TsuTT3IKKVE7R8pyXUp%2FVLVMXOMwmgNIf2J5sga6VvpL9%2B119Q%2FvMKM0pntlSCzpragP%2BHxj3jv3N8e970lcdXHRw5w0e28PE3JDVpyzv%2B8rfgE%3D&SigAlg=http%3A%2F%2Fwww.w3.org%2F2000%2F09%2Fxmldsig%23rsa-sha1&Signature=K%2BJgq1CSKPenqPrLoGEhgAVzITHyC16zeudnyhZdAiSaL652zW9PbJFkXGN6lx215Vct0DDevDCboU5Q7aYDAbKuknY7hRfF8%2Fnk3lSzIMacTamIoxS%2B7gbX4v0pktDxAjrqo56sZaGN6%2FIeCv8ppA6rsdSendR7CM3xLsEc%2BMqVnnUKFpyfrOAVgypSP3prHDOlPinLp0sl4wZvqoTWrpS6oISxrJ8UICd5p0RCGgIE3%2BHf%2BGG3Jx7MSeF0%2F%2FLX1LNVIWXLcc2tmgHotenZdHgV5y1DaiSR0E%2F%2F7G3P%2BvCPQB3uS%2BDV%2BZQPpzMMp7PP8AuMBHyboCMTL%2B%2FunuFTm2KJwtuohkgy985iQ12fPHEHgPgzWIRpAMrpeQM%2BGOmu7OpYiirsY%2BcO4rl2xXN9SysgOiZpOXUYVzxP2MNJYGXOGcG3WElT%2F94ZLiCZ60XmKrg%2FzAjj7ODq0hJ%2F%2FsJuqyFbKmEectkGcnEzl6UHwwDpWDt%2FilB8f2VkC8GClWBCSXJFrLz%2FoGryx86r9kd%2Fqg94QFhv%2FWoQRA9SDxqlpJ7kv5z0MBon%2F6hRwkoiDNy9UyI8xU%2F7m%2F7I0%2B7IVqMDyRyxhvmlmCpKr7mnhCPiKvY9KjamFXKo4xTJEfgdxAvMK5p5d3XzZZD7fVuyxHimClPG6z0lgd9cO1jNLAeNVo8%3D',
     'accept-encoding': 'gzip, deflate, br',
     'accept-language': 'ko-KR,ko;q=0.9,en-US;q=0.8,en;q=0.7',
     cookie: 'PHPSESSIDIDP=464753a5673700ae13339336b10f894b; SimpleSAMLAuthTokenIdp=_6b28582d003cdbcfea7934113ec90c0ec4fb7e3481; connect.sid=s%3AXCXiecRelBNydzAVqTwF400B6SFSygKm.Ejr7jkaxHX%2BmbeAYB0vpzkmnlB9H8FXdEClLpJvGEvM' },
  rawHeaders:
   [ 'Host',
     'localhost:8446',
     'Connection',
     'keep-alive',
     'Content-Length',
     '9385',
     'Cache-Control',
     'max-age=0',
     'Origin',
     'http://localhost:8380',
     'Upgrade-Insecure-Requests',
     '1',
     'Content-Type',
     'application/x-www-form-urlencoded',
     'User-Agent',
     'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/77.0.3865.75 Safari/537.36',
     'Sec-Fetch-Mode',
     'navigate',
     'Accept',
     'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3',
     'Sec-Fetch-Site',
     'same-site',
     'Referer',
     'http://localhost:8380/simplesaml/saml2/idp/SSOService.php?SAMLRequest=fVHBbsIwDP2VKHeapGWoRFDExmFITKC122GXKZSMRqRJFqdon79QQGLSxMWS7ef3%2FOzJ7KfV6Cg9KGummCUUz4oJiFY7Pu9CY17ldychoAgzwPvGFHfecCtAATeilcBDzcv5y4qnCeXO22BrqzFaLqb4cyRono2GIv2S23G%2BY9kDyzB6vwrGiQgE6OTSQBAmxBJl4wEdD1Ja0RFnQ87SJGX5B0abC%2FWjMjtl9vf32J5BwJ%2BrajPYrMsKo0V0oowIvXQTguOEaFsL3VgIPM9ySkC1TsuTT3IKKVE7R8pyXUp%2FVLVMXOMwmgNIf2J5sga6VvpL9%2B119Q%2FvMKM0pntlSCzpragP%2BHxj3jv3N8e970lcdXHRw5w0e28PE3JDVpyzv%2B8rfgE%3D&SigAlg=http%3A%2F%2Fwww.w3.org%2F2000%2F09%2Fxmldsig%23rsa-sha1&Signature=K%2BJgq1CSKPenqPrLoGEhgAVzITHyC16zeudnyhZdAiSaL652zW9PbJFkXGN6lx215Vct0DDevDCboU5Q7aYDAbKuknY7hRfF8%2Fnk3lSzIMacTamIoxS%2B7gbX4v0pktDxAjrqo56sZaGN6%2FIeCv8ppA6rsdSendR7CM3xLsEc%2BMqVnnUKFpyfrOAVgypSP3prHDOlPinLp0sl4wZvqoTWrpS6oISxrJ8UICd5p0RCGgIE3%2BHf%2BGG3Jx7MSeF0%2F%2FLX1LNVIWXLcc2tmgHotenZdHgV5y1DaiSR0E%2F%2F7G3P%2BvCPQB3uS%2BDV%2BZQPpzMMp7PP8AuMBHyboCMTL%2B%2FunuFTm2KJwtuohkgy985iQ12fPHEHgPgzWIRpAMrpeQM%2BGOmu7OpYiirsY%2BcO4rl2xXN9SysgOiZpOXUYVzxP2MNJYGXOGcG3WElT%2F94ZLiCZ60XmKrg%2FzAjj7ODq0hJ%2F%2FsJuqyFbKmEectkGcnEzl6UHwwDpWDt%2FilB8f2VkC8GClWBCSXJFrLz%2FoGryx86r9kd%2Fqg94QFhv%2FWoQRA9SDxqlpJ7kv5z0MBon%2F6hRwkoiDNy9UyI8xU%2F7m%2F7I0%2B7IVqMDyRyxhvmlmCpKr7mnhCPiKvY9KjamFXKo4xTJEfgdxAvMK5p5d3XzZZD7fVuyxHimClPG6z0lgd9cO1jNLAeNVo8%3D',
     'Accept-Encoding',
     'gzip, deflate, br',
     'Accept-Language',
     'ko-KR,ko;q=0.9,en-US;q=0.8,en;q=0.7',
     'Cookie',
     'PHPSESSIDIDP=464753a5673700ae13339336b10f894b; SimpleSAMLAuthTokenIdp=_6b28582d003cdbcfea7934113ec90c0ec4fb7e3481; connect.sid=s%3AXCXiecRelBNydzAVqTwF400B6SFSygKm.Ejr7jkaxHX%2BmbeAYB0vpzkmnlB9H8FXdEClLpJvGEvM' ],
  trailers: {},
  rawTrailers: [],
  upgrade: false,
  url: '/source',
  method: 'POST',
  statusCode: null,
  statusMessage: null,
  client:
   Socket {
     connecting: false,
     _hadError: false,
     _handle:
      TCP {
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        onconnection: null,
        writeQueueSize: 0,
        _consumed: true },
     _parent: null,
     _host: null,
     _readableState:
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: [Object],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     domain: null,
     _events:
      { end: [Array],
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        drain: [Array],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        close: [Array],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause] },
     _eventsCount: 10,
     _maxListeners: undefined,
     _writableState:
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: false,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     allowHalfOpen: true,
     _bytesDispatched: 1566,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server:
      Server {
        domain: null,
        _events: [Object],
        _eventsCount: 2,
        _maxListeners: undefined,
        _connections: 2,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        _pendingResponseData: 0,
        maxHeadersCount: null,
        _connectionKey: '6::::8446',
        [Symbol(asyncId)]: 10 },
     _server:
      Server {
        domain: null,
        _events: [Object],
        _eventsCount: 2,
        _maxListeners: undefined,
        _connections: 2,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        _pendingResponseData: 0,
        maxHeadersCount: null,
        _connectionKey: '6::::8446',
        [Symbol(asyncId)]: 10 },
     _idleTimeout: 120000,
     _idleNext:
      Socket {
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: null,
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _events: [Object],
        _eventsCount: 10,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: true,
        _bytesDispatched: 0,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: [Object],
        _idleTimeout: 120000,
        _idleNext: [Object],
        _idlePrev: [Circular],
        _idleStart: 2941,
        _destroyed: false,
        parser: [Object],
        on: [Function: socketOnWrap],
        _paused: false,
        read: [Function],
        _consuming: true,
        [Symbol(asyncId)]: 19,
        [Symbol(bytesRead)]: 0,
        [Symbol(asyncId)]: 20,
        [Symbol(triggerAsyncId)]: 19 },
     _idlePrev:
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Object],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idleStart: 4210,
     _destroyed: false,
     parser:
      HTTPParser {
        '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        '4': [Function: bound onParserExecute],
        _headers: [],
        _url: '',
        _consumed: true,
        socket: [Circular],
        incoming: [Circular],
        outgoing: null,
        maxHeaderPairs: 2000,
        onIncoming: [Function: bound parserOnIncoming] },
     on: [Function: socketOnWrap],
     _paused: false,
     read: [Function],
     _consuming: true,
     _httpMessage:
      ServerResponse {
        domain: null,
        _events: [Object],
        _eventsCount: 1,
        _maxListeners: undefined,
        output: [],
        outputEncodings: [],
        outputCallbacks: [],
        outputSize: 0,
        writable: true,
        _last: false,
        upgrading: false,
        chunkedEncoding: false,
        shouldKeepAlive: true,
        useChunkedEncodingByDefault: true,
        sendDate: true,
        _removedConnection: false,
        _removedContLen: false,
        _removedTE: false,
        _contentLength: null,
        _hasBody: true,
        _trailer: '',
        finished: false,
        _headerSent: false,
        socket: [Circular],
        connection: [Circular],
        _header: null,
        _onPendingData: [Function: bound updateOutgoingData],
        _sent100: false,
        _expect_continue: false,
        req: [Circular],
        locals: {},
        writeHead: [Function: writeHead],
        end: [Function: end],
        [Symbol(outHeadersKey)]: [Object] },
     [Symbol(asyncId)]: 13,
     [Symbol(bytesRead)]: 0,
     [Symbol(asyncId)]: 15,
     [Symbol(triggerAsyncId)]: 13 },
  _consuming: true,
  _dumped: false,
  next: [Function: next],
  baseUrl: '',
  originalUrl: '/login/callback',
  _parsedUrl:
   Url {
     protocol: null,
     slashes: null,
     auth: null,
     host: null,
     port: null,
     hostname: null,
     hash: null,
     search: null,
     query: null,
     pathname: '/login/callback',
     path: '/login/callback',
     href: '/login/callback',
     _raw: '/login/callback' },
  params: {},
  query: {},
  res:
   ServerResponse {
     domain: null,
     _events: { finish: [Function: bound resOnFinish] },
     _eventsCount: 1,
     _maxListeners: undefined,
     output: [],
     outputEncodings: [],
     outputCallbacks: [],
     outputSize: 0,
     writable: true,
     _last: false,
     upgrading: false,
     chunkedEncoding: false,
     shouldKeepAlive: true,
     useChunkedEncodingByDefault: true,
     sendDate: true,
     _removedConnection: false,
     _removedContLen: false,
     _removedTE: false,
     _contentLength: null,
     _hasBody: true,
     _trailer: '',
     finished: false,
     _headerSent: false,
     socket:
      Socket {
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: null,
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _events: [Object],
        _eventsCount: 10,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: true,
        _bytesDispatched: 1566,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: [Object],
        _idleTimeout: 120000,
        _idleNext: [Object],
        _idlePrev: [Object],
        _idleStart: 4210,
        _destroyed: false,
        parser: [Object],
        on: [Function: socketOnWrap],
        _paused: false,
        read: [Function],
        _consuming: true,
        _httpMessage: [Circular],
        [Symbol(asyncId)]: 13,
        [Symbol(bytesRead)]: 0,
        [Symbol(asyncId)]: 15,
        [Symbol(triggerAsyncId)]: 13 },
     connection:
      Socket {
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: null,
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _events: [Object],
        _eventsCount: 10,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: true,
        _bytesDispatched: 1566,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: [Object],
        _idleTimeout: 120000,
        _idleNext: [Object],
        _idlePrev: [Object],
        _idleStart: 4210,
        _destroyed: false,
        parser: [Object],
        on: [Function: socketOnWrap],
        _paused: false,
        read: [Function],
        _consuming: true,
        _httpMessage: [Circular],
        [Symbol(asyncId)]: 13,
        [Symbol(bytesRead)]: 0,
        [Symbol(asyncId)]: 15,
        [Symbol(triggerAsyncId)]: 13 },
     _header: null,
     _onPendingData: [Function: bound updateOutgoingData],
     _sent100: false,
     _expect_continue: false,
     req: [Circular],
     locals: {},
     writeHead: [Function: writeHead],
     end: [Function: end],
     [Symbol(outHeadersKey)]: { 'x-powered-by': [Array] } },
  secret: undefined,
  cookies:
   { PHPSESSIDIDP: '464753a5673700ae13339336b10f894b',
     SimpleSAMLAuthTokenIdp: '_6b28582d003cdbcfea7934113ec90c0ec4fb7e3481',
     'connect.sid': 's:XCXiecRelBNydzAVqTwF400B6SFSygKm.Ejr7jkaxHX+mbeAYB0vpzkmnlB9H8FXdEClLpJvGEvM' },
  signedCookies: {},
  body:
   { SAMLResponse: '' },
  _body: true,
  length: undefined,
  read: [Function],
  _passport:
   { instance:
      Authenticator {
        _key: 'passport',
        _strategies: [Object],
        _serializers: [Array],
        _deserializers: [Array],
        _infoTransformers: [],
        _framework: [Object],
        _userProperty: 'user',
        _sm: [Object],
        Authenticator: [Function: Authenticator],
        Passport: [Function: Authenticator],
        Strategy: [Object],
        strategies: [Object] },
     session: { user: [Object] } },
  _parsedOriginalUrl:
   Url {
     protocol: null,
     slashes: null,
     auth: null,
     host: null,
     port: null,
     hostname: null,
     hash: null,
     search: null,
     query: null,
     pathname: '/login/callback',
     path: '/login/callback',
     href: '/login/callback',
     _raw: '/login/callback' },
  sessionStore:
   MemoryStore {
     domain: null,
     _events:
      { disconnect: [Function: ondisconnect],
        connect: [Function: onconnect] },
     _eventsCount: 2,
     _maxListeners: undefined,
     sessions:
      { XCXiecRelBNydzAVqTwF400B6SFSygKm: '{"cookie":{"originalMaxAge":null,"expires":null,"httpOnly":true,"path":"/"},"redirectUrl":"/source"}' },
     generate: [Function] },
  sessionID: 'XCXiecRelBNydzAVqTwF400B6SFSygKm',
  session:
   Session {
     cookie:
      { path: '/',
        _expires: null,
        originalMaxAge: null,
        httpOnly: true },
     redirectUrl: '/source',
     passport: { user: [Object] } },
  route:
   Route {
     path: '/login/callback',
     stack: [ [Object], [Object], [Object] ],
     methods: { post: true } },
  user:
   { issuer: 'http://localhost:8380/simplesaml/saml2/idp/metadata.php',
     sessionIndex: '_f9a36f05db1b2b906a5fbb5d1f0f7b210128fa2bb0',
     nameID: '_246ccc64f4e788bfe381adf84f6398ba6b2af3a21b',
     nameIDFormat: 'urn:oasis:names:tc:SAML:2.0:nameid-format:transient',
     nameQualifier: undefined,
     spNameQualifier: 'urn:opengrok',
     uid: '1',
     eduPersonAffiliation: 'group1',
     email: 'user1@example.com',
     getAssertionXml: [Function],
     getAssertion: [Function],
     getSamlResponseXml: [Function] },
  authInfo: {} }
